// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  ALUMNI
}

enum UserStatus {
  ACCOUNT_DETAILS
  EDUCATION_DETAILS
  EXPERIENCE_DETAILS
  PROFILE_DETAILS
  COMPLETED
}

enum JobTypes {
    JOB
    INTERNSHIP
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  full_name       String?
  phone           String
  personal_mail   String            @unique
  college_mail    String            @unique
  password        String
  college_roll    String
  university_roll String?
  domain          String
  profile_pic_url String?
  user_type       UserType
  stream          String?
  status          UserStatus
  higher_studies  HigherStudies[]
  internships     Internships[]
  workExperiences WorkExperiences[]
  jobs            Jobs[]            @relation("UserJobs")
  news            News[]            @relation("UserNews")
}

type HigherStudies {
  id         Int
  institute  String
  course     String
  start_date DateTime
  end_date   DateTime
}

type Internships {
  id         Int
  company    String
  role       String
  start_date DateTime
  end_date   DateTime
  skills     String[]
}

enum WorkStatus {
  ONGOING
  EX_EMPLOYEE
}

model WorkExperiences {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String     @db.ObjectId
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company     String
  role        String
  start_date  DateTime
  end_date    DateTime?
  status      WorkStatus
  skills      String[]
  description String
}

model JobCategories {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique

  jobs  Jobs[]  @relation("CategoryJobs")
}


model Jobs {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId 
  category_id          String         @db.ObjectId
  category             JobCategories  @relation(fields: [category_id], references: [id], onDelete: Cascade, name: "CategoryJobs")
  created_by           String         @db.ObjectId
  user                 User           @relation(fields: [created_by], references: [id], onDelete: Cascade, name: "UserJobs")
  title                String
  company_name         String
  description          String
  apply_link           String
  location             String
  job_type             JobTypes
  posted_at            DateTime       @default(now())
  application_deadline DateTime
}

model News {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId 
  author_id          String         @db.ObjectId
  title              String
  description        String
  banner             String?
  tags               String[]
  likes              Int
  views              Int
  reports            String[]
  admin_approval     Boolean
  user           User        @relation(fields: [author_id], references: [id], onDelete: Cascade, name: "UserNews")
  reports        Report[]    @relation("NewsReports")
  comments       Comments[]  @relation("NewsComments")
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  news_id   String   @db.ObjectId
  user_id   String   @db.ObjectId
  isEdited  Boolean  @default(false)
  comment   String

  news      News     @relation(fields: [news_id], references: [id], onDelete: Cascade, name: "NewsComments")
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}



