// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  ALUMNI
  ADMIN
}

enum UserStatus {
  ACCOUNT_DETAILS
  EDUCATION_DETAILS
  EXPERIENCE_DETAILS
  PROFILE_DETAILS
  COMPLETED
}

model CollegeUser {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  roll_no       String @unique
  stream        String
  passing_year  String
  phone_number  String
  personal_mail String
  college_mail  String @unique

  @@index([college_mail, personal_mail])
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  full_name       String?
  phone           String
  personal_mail   String            @unique
  college_mail    String            @unique
  password        String
  college_roll    String
  university_roll String?
  domain          String
  profile_pic_url String?
  user_type       UserType
  stream          String?
  status          UserStatus
  higher_studies  HigherStudies[]
  internships     Internships[]
  workExperiences WorkExperiences[]
  jobs            Jobs[]            @relation("UserJobs")
  events          Events[]
  eventInterests  EventInterests[]
  news            News[]
  comment         Comment[]
}

type HigherStudies {
  id         Int
  institute  String
  course     String
  start_date DateTime
  end_date   DateTime
}

type Internships {
  id         Int
  company    String
  role       String
  start_date DateTime
  end_date   DateTime
  skills     String[]
}

enum WorkStatus {
  ONGOING
  EX_EMPLOYEE
}

model WorkExperiences {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String     @db.ObjectId
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company     String
  role        String
  start_date  DateTime
  end_date    DateTime?
  status      WorkStatus
  skills      String[]
  description String
}

model JobCategories {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  jobs Jobs[] @relation("CategoryJobs")
}

enum JobTypes {
  JOB
  INTERNSHIP
}

model Jobs {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  category_id          String        @db.ObjectId
  category             JobCategories @relation(fields: [category_id], references: [id], onDelete: Cascade, name: "CategoryJobs")
  created_by           String        @db.ObjectId
  user                 User          @relation(fields: [created_by], references: [id], onDelete: Cascade, name: "UserJobs")
  title                String
  company_name         String
  description          String
  apply_link           String
  location             String
  job_type             JobTypes
  posted_at            DateTime      @default(now())
  application_deadline DateTime
}

type EventAttraction {
  label String
  value String
}

type EventAnnouncements {
  title       String
  description String
}

model Events {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  event_image    String
  banner_image   String
  venue          String
  description    String[]
  images         String[]
  schedule       String
  attractions    EventAttraction
  rules          String[]
  announcements  EventAnnouncements
  eventInterests EventInterests[]
  expires_at     DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EventInterests {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String   @unique @db.ObjectId
  event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

type NewsActivity {
  total_likes    Int
  total_comments Int
}

model News {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  author_id   String        @db.ObjectId
  author      User          @relation(fields: [author_id], references: [id], onDelete: Cascade)
  title       String
  description String
  banner      String
  tags        String[]
  activities  NewsActivity?
  comment     Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Comment {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  newsId String @db.ObjectId
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)

  comment    String
  isEdited   Boolean
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
